{"version":3,"sources":["Chat/ChatInput.tsx","Chat/ChatLog.tsx","Chat/Loading.tsx","Chat/Chat.tsx","Chat/Home.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["ChatInput","userName","socket","useState","chatMessage","setChatMessage","className","onSubmit","e","preventDefault","emit","localStorage","getItem","msg","timeStamp","Date","toLocaleTimeString","placeholder","value","onChange","target","ChatLog","msgList","setMsgList","useEffect","console","log","on","messageItem","systemMessage","disconnect","map","idx","Loading","Chat","roomName","myInfo","socketIOClient","currentSocket","setCurrentSocket","Home","setUserName","setRoomName","setItem","htmlFor","name","to","App","path","exact","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d93ea71.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport \"./ChatInput.css\";\n\ninterface chatObj {\n\tuserName:any,\n\tsocket:any\n}\n\nconst ChatInput = ({ userName, socket }: chatObj) => {\n  const [chatMessage, setChatMessage] = useState(\"\");\n\n  const handleSubmit = (e:any) => {\n    e.preventDefault();\n    socket.emit(\"onSend\", {\n      userName: userName ? userName : localStorage.getItem(\"userName\"),\n      msg: chatMessage,\n      timeStamp: new Date().toLocaleTimeString(),\n    });\n    setChatMessage(\"\");\n  };\n\n  const onChatMessageChange = (e:any) => {\n    setChatMessage(e.target.value);\n  };\n\n  return (\n    <div className=\"ChatInput-container\">\n      <form className=\"ChatInput-form\" onSubmit={handleSubmit}>\n        <input\n          placeholder=\"메시지를 입력하세요.\"\n          value={chatMessage}\n          onChange={onChatMessageChange}\n        ></input>\n        <button>전송</button>\n      </form>\n    </div>\n  );\n};\n\nexport default ChatInput;","import React, { useEffect, useState } from \"react\";\n\nconst ChatLog = ({ socket }: any) => {\n  const [msgList, setMsgList] = useState<any[]>([]);\n\n  useEffect(() => {\n\tconsole.log('컴포넌트가 화면에 나타남');\n\t// messsgeItem : {msg: String, name: String, timeStamp: String}\n    socket.on(\"onReceive\", (messageItem: never) => {\n      setMsgList((msgList) => [...msgList, messageItem]);\n      console.log(messageItem);\n    });\n    socket.on(\"onConnect\", (systemMessage: any) => {\n      setMsgList((msgList) => [...msgList, { msg: systemMessage } as never]);\n    });\n    socket.on(\"onDisconnect\", (systemMessage: any) => {\n      setMsgList((msgList) => [...msgList, { msg: systemMessage } as never]);\n    });\n    return () => {\n      socket.disconnect();\n    };\n  }, [socket]);\n\n  return (\n    <div>\n      {msgList.map((msg, idx) => (\n        <div key={idx}>\n          <div>{msg.userName}</div>\n          <div>{msg.timeStamp}</div>\n          <div>{msg.msg}</div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ChatLog;","import React from \"react\";\n\nconst Loading = () => {\n  console.log(\"loading\");\n  return <div>Loading</div>;\n};\n\nexport default Loading;","import React, { useEffect, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport ChatInput from \"./ChatInput\";\nimport ChatLog from \"./ChatLog\";\nimport Loading from \"./Loading\";\n\n//const socket = socketIOClient(\"localhost:5000\");\n\ninterface chatObj{\n\troomName: any,\n\tuserName: any\n}\n\nconst Chat = ({ roomName, userName }: chatObj) => {\n  const myInfo = {\n    roomName: roomName ? roomName : localStorage.getItem(\"roomName\"),\n    userName: userName ? userName : localStorage.getItem(\"userName\"),\n  };\n\n  const [currentSocket, setCurrentSocket] = useState(socketIOClient());\n\n  useEffect(() => {\n    setCurrentSocket(socketIOClient(\"http://localhost:80\"));\n  }, []);\n\n  if (currentSocket) {\n    currentSocket.on(\"connect\", () => {\n      currentSocket.emit(\"join\", myInfo);\n    });\n  }\n\n  return (\n    <div>\n      {currentSocket ? (\n        <>\n          <ChatLog socket={currentSocket}></ChatLog>\n          <ChatInput userName={userName} socket={currentSocket}></ChatInput>\n        </>\n      ) : (\n        <Loading></Loading>\n      )}\n    </div>\n  );\n};\n\nexport default Chat;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Home.css\";\n\ninterface HomeObj{\n\tuserName:any,\n\troomName:any,\n\tsetUserName:any,\n\tsetRoomName:any,\n}\n\nconst Home = ({ userName, roomName, setUserName, setRoomName }: HomeObj) => {\n  const handleUserNameChange = (e:any) => {\n    setUserName(e.target.value);\n  };\n  const handleRoomNameChange = (e:any) => {\n    setRoomName(e.target.value);\n  };\n\n  localStorage.setItem(\"userName\", userName);\n  localStorage.setItem(\"roomName\", roomName);\n\n  return (\n    <div className=\"Home-container\">\n      <label htmlFor=\"roomName\">Room</label>\n      <input name=\"roomName\" onChange={handleRoomNameChange}></input>\n      <label htmlFor=\"id\">ID</label>\n      <input name=\"id\" onChange={handleUserNameChange}></input>\n      <button className=\"Join-button\">\n        <Link to=\"/Chat\">새로운 방 만들기</Link>\n      </button>\n      <button className=\"Join-button\">\n        <Link to=\"/Chat\">채팅 참여하기</Link>\n      </button>\n    </div>\n  );\n};\n\nexport default Home;","import logo from './logo.svg';\nimport React, {useState} from \"react\";\nimport './App.css';\n//import Hello, {Wrapper, Counter, InputSample} from './Hello';\nimport Chat from \"./Chat/Chat\";\nimport Home from \"./Chat/Home\";\nimport \"./Chat/global.css\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\n\n/*\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n*/\n\n/*\nfunction App()\n{\n\treturn (\n\t\t<Wrapper>\n\t\t\t<Hello color=\"red\" name=\"react\" isSpecial/>\n\t\t\t<Hello color=\"orange\"/>\n\t\t\t<Counter />\n\t\t\t<InputSample />\n\t\t</Wrapper>\n\t)\n}\n*/\n\n\nfunction App() {\n\tconst [userName, setUserName] = useState();\n\tconst [roomName, setRoomName] = useState();\n\n\treturn (\n\t  <div className=\"App\">\n\t\t<Router>\n\t\t  <Switch>\n\t\t\t<Route path=\"/\" exact>\n\t\t\t  <Home\n\t\t\t\tuserName={userName}\n\t\t\t\troomName={roomName}\n\t\t\t\tsetUserName={setUserName}\n\t\t\t\tsetRoomName={setRoomName}\n\t\t\t  />\n\t\t\t</Route>\n\t\t\t<Route\n\t\t\t  path=\"/chat\"\n\t\t\t  exact\n\t\t\t  render={() => <Chat userName={userName} roomName={roomName} />}\n\t\t\t></Route>\n\t\t  </Switch>\n\t\t</Router>\n\t  </div>\n\t);\n  }\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}