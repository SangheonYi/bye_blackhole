{"ast":null,"code":"var _jsxFileName = \"/Users/jinkim/ts_5/app/react_p/src/codes/AppStateContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useReducer, useContext, useEffect } from \"react\";\nimport { AppState } from \"react-native\";\nimport PubNub from \"pubnub\";\nimport keyConfiguration from \"./config/pubnub-keys.json\";\n//import Blank from './';\nimport DOMPurify from 'dompurify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generatedName = generateName(); // This is the UUID that we use for identification.\n//This is where you define the chat app properties.\n\nexport const appData = {\n  presence: true,\n  // Enable or disable presence.\n  presenceLastUpdated: 0,\n  // Last time that a presence event was used to update the activeUsers list. Used to prevent duplicate events from triggering multiple calls to hereNow.\n  presenceOccupancy: 0,\n  // How many active users there are.\n  history: true,\n  // Enable or disable history.\n  historyMax: 10,\n  // How many messages to load from history (max 100).\n  maxMessagesInList: 200,\n  // Max number of messages at most in the message list.\n  selfAvatar: \"https://ui-avatars.com/api/?name=\" + generatedName + \"?size=100&rounded=true&uppercase=true&bold=true&background=edab63&color=FFF\",\n  //The URL for the avatar graphic file\n  selfName: generatedName,\n  // Set the display name to be the same as the UUID. You can make this whatever you want.\n  messages: [],\n  // Array of UserMessages.\n  activeUsers: [],\n  // Array of active users.\n  channel: \"global\",\n  // The chat channel\n  pubnub: new PubNub({\n    publishKey: keyConfiguration.publishKey,\n    // See config/pubnub-keys.json.\n    subscribeKey: keyConfiguration.subscribeKey,\n    // See config/pubnub-keys.json.\n    uuid: generatedName // Use the UUID for identification on PubNub.\n\n  }),\n  message: \"\"\n};\n\nfunction capFirst(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nfunction generateName() {\n  var name1 = [\"Darwin\", \"Natalee\", \"Ryann\", \"Maggie\", \"Scarlet\", \"Kassidy\", \"Matteo\", \"Ethen\", \"Zain\", \"Vivian\", \"Tess\", \"Krystal\", \"Liberty\", \"Brielle\", \"Jaycee\", \"Sylvia\", \"Eden\", \"Arianna\", \"Martha\", \"Jayson\", \"Lainey\", \"Jorden\", \"Daniela\", \"Mohammad\", \"Kathleen\", \"Reuben\", \"Shane\", \"Annie\", \"Logan\", \"Bo\", \"Darius\", \"Nadia\", \"Cristal\", \"Reid\", \"Thomas\", \"Anna\", \"Javion\", \"Gabriel\", \"Bennett\", \"Jerimiah\", \"Connor\", \"Bryant\", \"Parker\", \"Livia\", \"Ellie\", \"Esteban\", \"Morgan\", \"Toby\", \"Saige\", \"Imani\", \"Semaj\", \"Manuel\", \"Ansley\", \"Miah\", \"Ezequiel\", \"Makenzie\", \"Vincent\", \"Jacquelyn\", \"Rowan\", \"Leyla\", \"Evangeline\", \"Ella\", \"Briana\", \"Aaron\", \"Ciara\", \"Karla\", \"Jeffrey\", \"Damarion\", \"Raul\", \"Derick\", \"Jarrett\", \"Frances\", \"Xiomara\", \"Monica\", \"Deon\", \"Abigail\", \"Beau\", \"Angel\", \"Reese\", \"Kylee\", \"Ana\", \"Laci\", \"Madden\", \"Kaleigh\", \"Eduardo\", \"Leilani\", \"Aron\", \"Samson\", \"Trevon\", \"Cloe\", \"Jillian\", \"Avery\", \"Skylar\", \"Autumn\", \"Lesly\", \"Gael\", \"Emilio\", \"Mylee\", \"Courtney\", \"Francesca\", \"Jaydan\", \"Josie\", \"Victoria\", \"Jan\", \"Iliana\", \"Alannah\", \"Veronica\", \"Izaiah\", \"Stacy\", \"Callie\", \"Cynthia\", \"Gilberto\", \"Katelynn\", \"Jaylen\", \"Anahi\", \"Olivia\", \"Lincoln\", \"Niko\", \"Kiana\", \"Harold\", \"Lauren\", \"Adyson\", \"Jewel\", \"Adriana\", \"Mike\", \"Eve\", \"Johanna\", \"Maximillian\", \"Jakayla\", \"Tatiana\", \"Jake\", \"Tony\", \"Marlene\", \"Sara\", \"Jaylynn\", \"Jeffery\", \"Bryson\", \"Jesus\", \"Odin\", \"Anderson\", \"Chris\", \"Cadence\", \"Alfredo\", \"Janiah\", \"Matias\", \"Camren\", \"Nehemiah\", \"Cannon\", \"Dillon\", \"Kierra\", \"Lila\", \"Janet\", \"Jaelyn\", \"Roland\", \"Deacon\", \"Lilly\", \"Mallory\", \"Ryan\", \"Leo\", \"Carleigh\", \"Emma\", \"Evelyn\", \"Jordin\", \"Blaine\", \"Maleah\", \"Clayton\", \"Ryker\", \"Gerald\", \"Zack\", \"Alfred\", \"Julianna\", \"Finn\", \"Yadira\", \"Bailey\", \"Jaylan\", \"Cesar\", \"Arielle\", \"Michaela\", \"Tyson\", \"Lindsey\", \"Elias\", \"Carla\", \"Aedan\", \"Ashley\", \"Charles\", \"Enzo\", \"Luis\", \"Killian\", \"Samir\", \"Reece\", \"Yandel\", \"Teresa\", \"Mckinley\", \"Kendra\", \"Camryn\", \"Zavier\", \"Cody\", \"Ralph\", \"Brooklynn\", \"Casey\", \"Maeve\", \"Jayvon\", \"Davion\", \"Giada\", \"Cierra\", \"Marshall\", \"Alyvia\", \"Rodolfo\", \"Demarion\", \"Hana\", \"Esther\", \"Jose\", \"Alena\", \"Kamren\", \"Deven\", \"Tianna\", \"Beckett\", \"Phoenix\", \"Cayden\", \"Hazel\", \"Denise\", \"Kingston\", \"Charlie\", \"Miguel\", \"Carissa\", \"Jairo\", \"Adolfo\", \"Kaley\", \"Jaron\", \"Miracle\", \"Micaela\", \"Ally\", \"Louis\", \"Kyan\", \"Nicolas\", \"Steve\", \"Jackson\", \"Mckenzie\", \"Drake\", \"Willie\", \"Cali\", \"Joanna\", \"Kareem\", \"Halle\", \"Amina\", \"Chandler\", \"Melanie\", \"Darian\", \"Hassan\", \"Keyla\"];\n  var name2 = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n  var first = capFirst(name1[getRandomInt(1, name1.length)]);\n  var last = capFirst(name2[getRandomInt(1, name2.length)]);\n  return first + last;\n} //This is the default settings for your chat app.\n\n\nexport const AppStateContext = /*#__PURE__*/createContext({}); //The functions below are accessible through passing parameters to a dispatch function always accessible in our components.\n\nexport const appStateReducer = (state, action) => {\n  switch (action.type) {\n    //ADD_MESSAGE adds an incoming message to our internal MessageList buffer.\n    case \"ADD_MESSAGE\":\n      {\n        //If the messagelist is over our cap we discard the oldest message in the list.\n        if (state.messages.length > state.maxMessagesInList) {\n          state.messages.shift();\n        }\n\n        const addMessage = { ...state,\n          messages: [...state.messages, { ...action.payload\n          }]\n        };\n        return addMessage;\n      }\n    //ADD_HISTORY prepends array of messages to our internal MessageList buffer.\n\n    case \"ADD_HISTORY\":\n      {\n        const historyMerged = { ...state,\n          messages: [...action.payload, ...state.messages]\n        }; //If the messagelist is over our cap we discard the oldest messages in the list.\n\n        if (state.messages.length > state.maxMessagesInList) {\n          state.messages.slice(state.messages.length - state.maxMessagesInList, state.messages.length);\n        }\n\n        return historyMerged;\n      }\n    //REFRESH_ACTIVEUSERS replaces array of users in our internal activeUsers buffer.\n\n    case \"REFRESH_ACTIVEUSERS\":\n      {\n        const activeUsersList = { ...state,\n          activeUsers: [...action.payload]\n        };\n        return activeUsersList;\n      }\n    //UPDATE_OCCUPANCY updates the current count of users\n\n    case \"UPDATE_OCCUPANCY\":\n      {\n        const occupantsUpdate = { ...state,\n          presenceOccupancy: action.payload\n        };\n        return occupantsUpdate;\n      }\n    // Publishes a message to chat channel.\n\n    case \"SEND_MESSAGE\":\n      {\n        state.pubnub.publish({\n          channel: state.channel,\n          message: {\n            \"message\": DOMPurify.sanitize(action.payload),\n            \"senderName\": state.selfName\n          }\n        });\n        return { ...state\n        };\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport const AppStateProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(appStateReducer, appData);\n  useEffect(() => {\n    var newActiveUsers = state.activeUsers;\n\n    try {\n      //This where PubNub receives messages subscribed by the channel.\n      state.pubnub.addListener({\n        message: messageEvent => {\n          //console.log(`RECEIVING MESSAGE ${messageEvent.message.key}`);\n          messageEvent.message.message = DOMPurify.sanitize(messageEvent.message.message);\n          dispatch({\n            type: \"ADD_MESSAGE\",\n            payload: messageEvent.message\n          });\n        },\n        presence: function (p) {\n          if (p.action == \"join\") {\n            if (!state.activeUsers.includes(p.uuid)) {\n              // Only add user if they are missing from the list.\n              newActiveUsers.push(p.uuid);\n              newActiveUsers.sort();\n              dispatch({\n                type: \"REFRESH_ACTIVEUSERS\",\n                payload: newActiveUsers\n              });\n              dispatch({\n                type: \"UPDATE_OCCUPANCY\",\n                payload: newActiveUsers.length\n              }); // Add to current count\n            }\n          }\n\n          if (p.action == \"timeout\" || p.action == \"leave\") {\n            var index = newActiveUsers.indexOf(p.uuid);\n\n            if (index !== -1) {\n              newActiveUsers.splice(index, 1);\n              dispatch({\n                type: \"REFRESH_ACTIVEUSERS\",\n                payload: newActiveUsers\n              });\n              dispatch({\n                type: \"UPDATE_OCCUPANCY\",\n                payload: newActiveUsers.length\n              });\n            }\n          }\n        }\n      });\n\n      if (state.history) {\n        //Get the history on the default channel.\n        state.pubnub.history({\n          channel: state.channel,\n          count: state.historyMax // Limit of 100 messages.\n\n        }, (status, response) => {\n          if (response.messages.length > 0) {\n            var historyMessages = [];\n\n            for (var i = 0; i <= response.messages.length; i++) {\n              if (typeof response.messages[i] !== \"undefined\") {\n                response.messages[i].entry.message = DOMPurify.sanitize(response.messages[i].entry.message);\n                historyMessages.push(response.messages[i].entry);\n              }\n            }\n\n            dispatch({\n              type: \"ADD_HISTORY\",\n              payload: historyMessages\n            });\n          }\n        });\n      }\n\n      if (state.presence) {\n        state.pubnub.hereNow({\n          channels: [state.channel],\n          includeUUIDs: true // In this demo we're using the uuid as the user's name. You could also use presence state to provide a username and more. In this app all we need is the UUID of online users.\n\n        }, (status, response) => {\n          if (response.channels[state.channel].occupancy > 0) {\n            var newActiveUsers = state.activeUsers;\n\n            for (var i = 0; i < response.channels[state.channel].occupancy; i++) {\n              if (!state.activeUsers.includes(response.channels[state.channel].occupants[i].uuid)) {\n                newActiveUsers.push(response.channels[state.channel].occupants[i].uuid);\n              }\n            }\n\n            newActiveUsers.push(state.selfName);\n            newActiveUsers.sort(); // This prevents a users name from moving in the list.\n\n            dispatch({\n              type: \"REFRESH_ACTIVEUSERS\",\n              payload: newActiveUsers\n            });\n            dispatch({\n              type: \"UPDATE_OCCUPANCY\",\n              payload: newActiveUsers.length\n            });\n          }\n        });\n      } // Subscribe on the default channel.\n\n\n      state.pubnub.subscribe({\n        channels: [state.channel],\n        //Only one channel, split in different rows if required and load in props, can be set by load balancer.\n        withPresence: state.presence\n      });\n    } catch (e) {\n      console.log(`Subscribe error ${e.message}`);\n    }\n  }, [appData]);\n  return /*#__PURE__*/_jsxDEV(AppStateContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 297,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AppStateProvider, \"t78ET2jYvS381nc6boby+qGcLio=\");\n\n_c = AppStateProvider;\nexport const useAppState = () => {\n  _s2();\n\n  return useContext(AppStateContext);\n};\n\n_s2(useAppState, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"AppStateProvider\");","map":{"version":3,"sources":["/Users/jinkim/ts_5/app/react_p/src/codes/AppStateContext.tsx"],"names":["React","createContext","useReducer","useContext","useEffect","AppState","PubNub","keyConfiguration","DOMPurify","generatedName","generateName","appData","presence","presenceLastUpdated","presenceOccupancy","history","historyMax","maxMessagesInList","selfAvatar","selfName","messages","activeUsers","channel","pubnub","publishKey","subscribeKey","uuid","message","capFirst","string","charAt","toUpperCase","slice","getRandomInt","min","max","Math","floor","random","name1","name2","first","length","last","AppStateContext","appStateReducer","state","action","type","shift","addMessage","payload","historyMerged","activeUsersList","occupantsUpdate","publish","sanitize","AppStateProvider","children","dispatch","newActiveUsers","addListener","messageEvent","p","includes","push","sort","index","indexOf","splice","count","status","response","historyMessages","i","entry","hereNow","channels","includeUUIDs","occupancy","occupants","subscribe","withPresence","e","console","log","useAppState"],"mappings":"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","sourcesContent":["import React, { useCallback, createContext, useReducer, useContext, useState, useEffect } from \"react\"\nimport { AppState} from \"react-native\";\nimport { generateUUID } from 'pubnub';\nimport PubNub, { SubscribeParameters } from \"pubnub\";\nimport keyConfiguration from \"./config/pubnub-keys.json\";\nimport { debug } from \"console\";\n//import Blank from './';\nimport DOMPurify from 'dompurify';\n\nconst generatedName: string = generateName(); // This is the UUID that we use for identification.\n\n//This is where you define the chat app properties.\nexport const appData: AppState = {\n  presence: true, // Enable or disable presence.\n  presenceLastUpdated: 0, // Last time that a presence event was used to update the activeUsers list. Used to prevent duplicate events from triggering multiple calls to hereNow.\n  presenceOccupancy: 0, // How many active users there are.\n  history: true, // Enable or disable history.\n  historyMax: 10, // How many messages to load from history (max 100).\n  maxMessagesInList: 200, // Max number of messages at most in the message list.\n  selfAvatar: \"https://ui-avatars.com/api/?name=\"+generatedName+\"?size=100&rounded=true&uppercase=true&bold=true&background=edab63&color=FFF\", //The URL for the avatar graphic file\n  selfName: generatedName, // Set the display name to be the same as the UUID. You can make this whatever you want.\n  messages: [], // Array of UserMessages.\n  activeUsers: [], // Array of active users.\n  channel: \"global\", // The chat channel\n  pubnub: new PubNub({\n    publishKey: keyConfiguration.publishKey, // See config/pubnub-keys.json.\n    subscribeKey: keyConfiguration.subscribeKey, // See config/pubnub-keys.json.\n    uuid: generatedName // Use the UUID for identification on PubNub.\n  }),\n  message: \"\",\n}\n\nfunction capFirst(string: string): string {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction getRandomInt(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\n\nfunction generateName(): string{\n  var name1 = [\"Darwin\",\"Natalee\",\"Ryann\",\"Maggie\",\"Scarlet\",\"Kassidy\",\"Matteo\",\"Ethen\",\"Zain\",\"Vivian\",\"Tess\",\"Krystal\",\"Liberty\",\"Brielle\",\"Jaycee\",\"Sylvia\",\"Eden\",\"Arianna\",\"Martha\",\"Jayson\",\"Lainey\",\"Jorden\",\"Daniela\",\"Mohammad\",\"Kathleen\",\"Reuben\",\"Shane\",\"Annie\",\"Logan\",\"Bo\",\"Darius\",\"Nadia\",\"Cristal\",\"Reid\",\"Thomas\",\"Anna\",\"Javion\",\"Gabriel\",\"Bennett\",\"Jerimiah\",\"Connor\",\"Bryant\",\"Parker\",\"Livia\",\"Ellie\",\"Esteban\",\"Morgan\",\"Toby\",\"Saige\",\"Imani\",\"Semaj\",\"Manuel\",\"Ansley\",\"Miah\",\"Ezequiel\",\"Makenzie\",\"Vincent\",\"Jacquelyn\",\"Rowan\",\"Leyla\",\"Evangeline\",\"Ella\",\"Briana\",\"Aaron\",\"Ciara\",\"Karla\",\"Jeffrey\",\"Damarion\",\"Raul\",\"Derick\",\"Jarrett\",\"Frances\",\"Xiomara\",\"Monica\",\"Deon\",\"Abigail\",\"Beau\",\"Angel\",\"Reese\",\"Kylee\",\"Ana\",\"Laci\",\"Madden\",\"Kaleigh\",\"Eduardo\",\"Leilani\",\"Aron\",\"Samson\",\"Trevon\",\"Cloe\",\"Jillian\",\"Avery\",\"Skylar\",\"Autumn\",\"Lesly\",\"Gael\",\"Emilio\",\"Mylee\",\"Courtney\",\"Francesca\",\"Jaydan\",\"Josie\",\"Victoria\",\"Jan\",\"Iliana\",\"Alannah\",\"Veronica\",\"Izaiah\",\"Stacy\",\"Callie\",\"Cynthia\",\"Gilberto\",\"Katelynn\",\"Jaylen\",\"Anahi\",\"Olivia\",\"Lincoln\",\"Niko\",\"Kiana\",\"Harold\",\"Lauren\",\"Adyson\",\"Jewel\",\"Adriana\",\"Mike\",\"Eve\",\"Johanna\",\"Maximillian\",\"Jakayla\",\"Tatiana\",\"Jake\",\"Tony\",\"Marlene\",\"Sara\",\"Jaylynn\",\"Jeffery\",\"Bryson\",\"Jesus\",\"Odin\",\"Anderson\",\"Chris\",\"Cadence\",\"Alfredo\",\"Janiah\",\"Matias\",\"Camren\",\"Nehemiah\",\"Cannon\",\"Dillon\",\"Kierra\",\"Lila\",\"Janet\",\"Jaelyn\",\"Roland\",\"Deacon\",\"Lilly\",\"Mallory\",\"Ryan\",\"Leo\",\"Carleigh\",\"Emma\",\"Evelyn\",\"Jordin\",\"Blaine\",\"Maleah\",\"Clayton\",\"Ryker\",\"Gerald\",\"Zack\",\"Alfred\",\"Julianna\",\"Finn\",\"Yadira\",\"Bailey\",\"Jaylan\",\"Cesar\",\"Arielle\",\"Michaela\",\"Tyson\",\"Lindsey\",\"Elias\",\"Carla\",\"Aedan\",\"Ashley\",\"Charles\",\"Enzo\",\"Luis\",\"Killian\",\"Samir\",\"Reece\",\"Yandel\",\"Teresa\",\"Mckinley\",\"Kendra\",\"Camryn\",\"Zavier\",\"Cody\",\"Ralph\",\"Brooklynn\",\"Casey\",\"Maeve\",\"Jayvon\",\"Davion\",\"Giada\",\"Cierra\",\"Marshall\",\"Alyvia\",\"Rodolfo\",\"Demarion\",\"Hana\",\"Esther\",\"Jose\",\"Alena\",\"Kamren\",\"Deven\",\"Tianna\",\"Beckett\",\"Phoenix\",\"Cayden\",\"Hazel\",\"Denise\",\"Kingston\",\"Charlie\",\"Miguel\",\"Carissa\",\"Jairo\",\"Adolfo\",\"Kaley\",\"Jaron\",\"Miracle\",\"Micaela\",\"Ally\",\"Louis\",\"Kyan\",\"Nicolas\",\"Steve\",\"Jackson\",\"Mckenzie\",\"Drake\",\"Willie\",\"Cali\",\"Joanna\",\"Kareem\",\"Halle\",\"Amina\",\"Chandler\",\"Melanie\",\"Darian\",\"Hassan\",\"Keyla\"];\n  var name2 = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"];\n  var first = capFirst(name1[getRandomInt(1, name1.length)]);\n  var last = capFirst(name2[getRandomInt(1, name2.length)]);\n  return (first + last);\n}\n\n//This is the default settings for your chat app.\nexport interface AppState {\n  presence: boolean,\n  presenceLastUpdated: number,\n  history: boolean,\n  historyMax: number,\n  maxMessagesInList: number,\n  message: string;\n  selfAvatar: string,\n  selfName: string,\n  messages: Array<string>,\n  activeUsers: Array<string>,\n  pubnub: PubNub,\n  channel: string\n}\n\ntype Action =\n  {\n    type: \"ADD_MESSAGE\",\n    payload: string\n  }\n  | {\n    type: \"ADD_HISTORY\",\n    payload: Array<string>\n  }\n  | {\n    type: \"REFRESH_ACTIVEUSERS\",\n    payload: Array<string>\n  }\n  | {\n    type: \"UPDATE_OCCUPANCY\",\n    payload: string\n  }\n  | {\n    type: \"SEND_MESSAGE\",\n    payload: {\n      messageContent: string\n    }\n  }\n\ninterface AppStateContextProps {\n  state: AppState,\n\n}\n\nexport const AppStateContext = createContext<AppStateContextProps>(\n  {} as AppStateContextProps\n)\n\n//The functions below are accessible through passing parameters to a dispatch function always accessible in our components.\nexport const appStateReducer = (state: AppState, action: Action): AppState => {\n  switch (action.type) {\n\n    //ADD_MESSAGE adds an incoming message to our internal MessageList buffer.\n    case \"ADD_MESSAGE\": {\n      //If the messagelist is over our cap we discard the oldest message in the list.\n      if (state.messages.length > state.maxMessagesInList ){\n        state.messages.shift();\n      }\n\n      const addMessage: AppState = {\n        ...state,\n        messages: [\n          ...state.messages as Array<string>,\n          {\n            ...action.payload as string\n          }\n        ]\n      };\n\n      return addMessage;\n    }\n     //ADD_HISTORY prepends array of messages to our internal MessageList buffer.\n    case \"ADD_HISTORY\": {\n\n       const historyMerged: AppState = {\n        ...state,\n        messages: [\n          ...action.payload as Array<string>,\n          ...state.messages as Array<string>\n        ]\n      };\n\n      //If the messagelist is over our cap we discard the oldest messages in the list.\n      if (state.messages.length > state.maxMessagesInList) {\n        state.messages.slice(state.messages.length-state.maxMessagesInList, state.messages.length);\n      }\n\n      return historyMerged;\n    }\n    //REFRESH_ACTIVEUSERS replaces array of users in our internal activeUsers buffer.\n    case \"REFRESH_ACTIVEUSERS\": {\n       const activeUsersList: AppState = {\n        ...state,\n        activeUsers: [\n          ...action.payload as Array<string>\n        ]\n      };\n      return activeUsersList;\n    }\n    //UPDATE_OCCUPANCY updates the current count of users\n    case \"UPDATE_OCCUPANCY\": {\n\n      const occupantsUpdate: AppState = {\n        ...state,\n        presenceOccupancy: action.payload as string\n      };\n\n      return occupantsUpdate;\n    }\n    // Publishes a message to chat channel.\n    case \"SEND_MESSAGE\": {\n\n      state.pubnub.publish({\n        channel: state.channel,\n        message: {\n          \"message\": DOMPurify.sanitize(action.payload as string) as string,\n          \"senderName\": state.selfName as string,\n        },\n      });\n\n      return { ...state }\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\nexport const AppStateProvider = ({ children }: React.PropsWithChildren<{}>) => {\n  const [state, dispatch] = useReducer(appStateReducer, appData)\n  useEffect(() => {\n    var newActiveUsers = state.activeUsers;\n    try {\n      //This where PubNub receives messages subscribed by the channel.\n      state.pubnub.addListener({\n        message: (messageEvent) => {\n          //console.log(`RECEIVING MESSAGE ${messageEvent.message.key}`);\n          messageEvent.message.message = DOMPurify.sanitize(messageEvent.message.message as string) as string;\n          dispatch({\n            type: \"ADD_MESSAGE\",\n            payload: messageEvent.message\n          });\n        },\n        presence: function(p) {\n          if (p.action == \"join\") {\n            if ((!state.activeUsers.includes(p.uuid)) ) { // Only add user if they are missing from the list.\n              newActiveUsers.push(p.uuid);\n              newActiveUsers.sort();\n              dispatch({\n                type: \"REFRESH_ACTIVEUSERS\",\n                payload: newActiveUsers\n              });\n              dispatch({\n                type: \"UPDATE_OCCUPANCY\",\n                payload: newActiveUsers.length\n              });\n              // Add to current count\n            }\n          }\n          if ((p.action == \"timeout\") || (p.action == \"leave\")) {\n            var index = newActiveUsers.indexOf(p.uuid)\n            if (index !== -1) {\n              newActiveUsers.splice(index, 1);\n              dispatch({\n                type: \"REFRESH_ACTIVEUSERS\",\n                payload: newActiveUsers\n              });\n              dispatch({\n                type: \"UPDATE_OCCUPANCY\",\n                payload: newActiveUsers.length\n              });\n            }\n          }\n        }\n      });\n\n      if (state.history) {\n        //Get the history on the default channel.\n        state.pubnub.history(\n            {\n                channel: state.channel,\n                count: state.historyMax // Limit of 100 messages.\n            },\n            (status, response) => {\n              if (response.messages.length > 0) {\n                var historyMessages: Array<string> = [];\n                for (var i = 0; i <= response.messages.length; i++) {\n                  if (typeof response.messages[i] !== \"undefined\") {\n                    response.messages[i].entry.message = DOMPurify.sanitize(response.messages[i].entry.message as string) as string;\n                    historyMessages.push(response.messages[i].entry as string);\n                  }\n                }\n                dispatch({\n                  type: \"ADD_HISTORY\",\n                  payload: historyMessages\n                });\n              }\n            }\n        );\n      }\n\n      if (state.presence) {\n        state.pubnub.hereNow(\n          {\n              channels: [state.channel],\n              includeUUIDs: true // In this demo we're using the uuid as the user's name. You could also use presence state to provide a username and more. In this app all we need is the UUID of online users.\n          },\n          (status, response) => {\n            if (response.channels[state.channel].occupancy > 0) {\n              var newActiveUsers = state.activeUsers;\n              for (var i = 0; i < response.channels[state.channel].occupancy; i++) {\n                if (!state.activeUsers.includes(response.channels[state.channel].occupants[i].uuid)) {\n                  newActiveUsers.push(response.channels[state.channel].occupants[i].uuid);\n                }\n              }\n              newActiveUsers.push(state.selfName);\n              newActiveUsers.sort(); // This prevents a users name from moving in the list.\n              dispatch({\n                type: \"REFRESH_ACTIVEUSERS\",\n                payload: newActiveUsers\n              });\n              dispatch({\n                type: \"UPDATE_OCCUPANCY\",\n                payload: newActiveUsers.length\n              });\n            }\n          }\n        );\n\n      }\n\n      // Subscribe on the default channel.\n      state.pubnub.subscribe(\n        {\n          channels: [state.channel], //Only one channel, split in different rows if required and load in props, can be set by load balancer.\n          withPresence: state.presence,\n        }\n      );\n\n    } catch (e) {\n      console.log(`Subscribe error ${e.message}`);\n    }\n\n  }, [appData]);\n\n  return (\n    <AppStateContext.Provider value={{ state, dispatch }}>\n      {children}\n    </AppStateContext.Provider>\n  );\n}\n\nexport const useAppState = () => {\n  return useContext(AppStateContext)\n}"]},"metadata":{},"sourceType":"module"}