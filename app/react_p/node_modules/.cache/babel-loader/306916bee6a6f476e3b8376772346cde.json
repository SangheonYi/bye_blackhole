{"ast":null,"code":"var _jsxFileName = \"/Users/jinkim/bye_blackhole/app/react_p/src/Chat/Chat.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport ChatInput from \"./ChatInput\";\nimport ChatLog from \"./ChatLog\";\nimport Loading from \"./Loading\"; //const socket = socketIOClient(\"localhost:5000\");\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Chat = ({\n  roomName,\n  userName\n}) => {\n  _s();\n\n  const myInfo = {\n    roomName: roomName ? roomName : localStorage.getItem(\"roomName\"),\n    userName: userName ? userName : localStorage.getItem(\"userName\")\n  };\n  const [currentSocket, setCurrentSocket] = useState(socketIOClient());\n  useEffect(() => {\n    setCurrentSocket(socketIOClient(\"http://localhost:80\"));\n    console.log(userName);\n    console.log(roomName);\n  }, []);\n\n  if (currentSocket) {\n    currentSocket.on(\"connect\", () => {\n      currentSocket.emit(\"join\", myInfo);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: currentSocket ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ChatLog, {\n        socket: currentSocket\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        userName: userName,\n        socket: currentSocket\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chat, \"Jv6YrxQc5asJeb4ELYynWPwLNDA=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/jinkim/bye_blackhole/app/react_p/src/Chat/Chat.tsx"],"names":["React","useEffect","useState","socketIOClient","ChatInput","ChatLog","Loading","Chat","roomName","userName","myInfo","localStorage","getItem","currentSocket","setCurrentSocket","console","log","on","emit"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,WAApB,C,CAEA;;;;;AAOA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAAqC;AAAA;;AAChD,QAAMC,MAAM,GAAG;AACbF,IAAAA,QAAQ,EAAEA,QAAQ,GAAGA,QAAH,GAAcG,YAAY,CAACC,OAAb,CAAqB,UAArB,CADnB;AAEbH,IAAAA,QAAQ,EAAEA,QAAQ,GAAGA,QAAH,GAAcE,YAAY,CAACC,OAAb,CAAqB,UAArB;AAFnB,GAAf;AAKA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCZ,QAAQ,CAACC,cAAc,EAAf,CAAlD;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,gBAAgB,CAACX,cAAc,CAAC,qBAAD,CAAf,CAAhB;AACHY,IAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYR,QAAZ;AACE,GAJQ,EAIN,EAJM,CAAT;;AAMA,MAAIK,aAAJ,EAAmB;AACjBA,IAAAA,aAAa,CAACI,EAAd,CAAiB,SAAjB,EAA4B,MAAM;AAChCJ,MAAAA,aAAa,CAACK,IAAd,CAAmB,MAAnB,EAA2BR,MAA3B;AACD,KAFD;AAGD;;AAED,sBACE;AAAA,cACGG,aAAa,gBACZ;AAAA,8BACE,QAAC,OAAD;AAAS,QAAA,MAAM,EAAEA;AAAjB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,SAAD;AAAW,QAAA,QAAQ,EAAEJ,QAArB;AAA+B,QAAA,MAAM,EAAEI;AAAvC;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA,oBADY,gBAMZ,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAhCD;;GAAMN,I;;KAAAA,I;AAkCN,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport ChatInput from \"./ChatInput\";\nimport ChatLog from \"./ChatLog\";\nimport Loading from \"./Loading\";\n\n//const socket = socketIOClient(\"localhost:5000\");\n\ninterface chatObj{\n\troomName: any,\n\tuserName: any\n}\n\nconst Chat = ({ roomName, userName }: chatObj) => {\n  const myInfo = {\n    roomName: roomName ? roomName : localStorage.getItem(\"roomName\"),\n    userName: userName ? userName : localStorage.getItem(\"userName\"),\n  };\n\n  const [currentSocket, setCurrentSocket] = useState(socketIOClient());\n\n  useEffect(() => {\n    setCurrentSocket(socketIOClient(\"http://localhost:80\"));\n\tconsole.log(userName);\n\tconsole.log(roomName);\n  }, []);\n\n  if (currentSocket) {\n    currentSocket.on(\"connect\", () => {\n      currentSocket.emit(\"join\", myInfo);\n    });\n  }\n\n  return (\n    <div>\n      {currentSocket ? (\n        <>\n          <ChatLog socket={currentSocket}></ChatLog>\n          <ChatInput userName={userName} socket={currentSocket}></ChatInput>\n        </>\n      ) : (\n        <Loading></Loading>\n      )}\n    </div>\n  );\n};\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}