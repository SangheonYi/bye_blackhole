{"ast":null,"code":"import _toConsumableArray from\"/Users/jinkim/bye_blackhole/app/react_p/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/jinkim/bye_blackhole/app/react_p/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useRef,useCallback,useEffect,useState}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ChatLog=function ChatLog(_ref){var socket=_ref.socket;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),msgList=_useState2[0],setMsgList=_useState2[1];var editDone=false;var scrollRef=useRef();var scrollToBottom=useCallback(function(){if(editDone){scrollRef.current.scrollIntoView({behavior:'smooth',block:'end',inline:'nearest'});editDone=false;}},[editDone]);useEffect(function(){// messsgeItem : {msg: String, name: String, timeStamp: String}\nsocket.on(\"onReceive\",function(messageItem){setMsgList(function(msgList){return[].concat(_toConsumableArray(msgList),[messageItem]);});editDone=true;console.log(messageItem);});socket.on(\"onConnect\",function(systemMessage){setMsgList(function(msgList){return[].concat(_toConsumableArray(msgList),[{msg:systemMessage}]);});});socket.on(\"onDisconnect\",function(systemMessage){setMsgList(function(msgList){return[].concat(_toConsumableArray(msgList),[{msg:systemMessage}]);});});return function(){socket.disconnect();};},[socket]);scrollToBottom();return/*#__PURE__*/_jsx(\"div\",{children:msgList.map(function(msg,idx){return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{children:msg.userName}),/*#__PURE__*/_jsx(\"div\",{children:msg.timeStamp}),/*#__PURE__*/_jsx(\"div\",{children:msg.msg})]},idx);})});};export default ChatLog;","map":{"version":3,"sources":["/Users/jinkim/bye_blackhole/app/react_p/src/Chat/ChatLog.tsx"],"names":["React","useRef","useCallback","useEffect","useState","ChatLog","socket","msgList","setMsgList","editDone","scrollRef","scrollToBottom","current","scrollIntoView","behavior","block","inline","on","messageItem","console","log","systemMessage","msg","disconnect","map","idx","userName","timeStamp"],"mappings":"oUAAA,MAAOA,CAAAA,KAAP,EAAgBC,MAAhB,CAAwBC,WAAxB,CAAqCC,SAArC,CAAgDC,QAAhD,KAAgE,OAAhE,C,wFAEA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,MAAqB,IAAlBC,CAAAA,MAAkB,MAAlBA,MAAkB,eACLF,QAAQ,CAAQ,EAAR,CADH,wCAC5BG,OAD4B,eACnBC,UADmB,eAEnC,GAAIC,CAAAA,QAAQ,CAAG,KAAf,CACA,GAAMC,CAAAA,SAAa,CAAGT,MAAM,EAA5B,CAEA,GAAMU,CAAAA,cAAc,CAAGT,WAAW,CAAC,UAAM,CACvC,GAAIO,QAAJ,CAAc,CACZC,SAAS,CAACE,OAAV,CAAkBC,cAAlB,CAAiC,CAAEC,QAAQ,CAAE,QAAZ,CAAsBC,KAAK,CAAE,KAA7B,CAAoCC,MAAM,CAAE,SAA5C,CAAjC,EACHP,QAAQ,CAAG,KAAX,CACE,CACF,CALiC,CAK/B,CAACA,QAAD,CAL+B,CAAlC,CAOAN,SAAS,CAAC,UAAM,CACjB;AACGG,MAAM,CAACW,EAAP,CAAU,WAAV,CAAuB,SAACC,WAAD,CAAwB,CAC7CV,UAAU,CAAC,SAACD,OAAD,qCAAiBA,OAAjB,GAA0BW,WAA1B,IAAD,CAAV,CACHT,QAAQ,CAAG,IAAX,CACGU,OAAO,CAACC,GAAR,CAAYF,WAAZ,EACD,CAJD,EAKAZ,MAAM,CAACW,EAAP,CAAU,WAAV,CAAuB,SAACI,aAAD,CAA2B,CAChDb,UAAU,CAAC,SAACD,OAAD,qCAAiBA,OAAjB,GAA0B,CAAEe,GAAG,CAAED,aAAP,CAA1B,IAAD,CAAV,CACD,CAFD,EAGAf,MAAM,CAACW,EAAP,CAAU,cAAV,CAA0B,SAACI,aAAD,CAAwB,CAChDb,UAAU,CAAC,SAACD,OAAD,qCAAiBA,OAAjB,GAA0B,CAAEe,GAAG,CAAED,aAAP,CAA1B,IAAD,CAAV,CACD,CAFD,EAGA,MAAO,WAAM,CACXf,MAAM,CAACiB,UAAP,GACD,CAFD,CAGD,CAhBQ,CAgBN,CAACjB,MAAD,CAhBM,CAAT,CAkBAK,cAAc,GAEd,mBACE,qBACGJ,OAAO,CAACiB,GAAR,CAAY,SAACF,GAAD,CAAMG,GAAN,qBACX,oCACE,qBAAMH,GAAG,CAACI,QAAV,EADF,cAEE,qBAAMJ,GAAG,CAACK,SAAV,EAFF,cAGE,qBAAML,GAAG,CAACA,GAAV,EAHF,GAAUG,GAAV,CADW,EAAZ,CADH,EADF,CAWD,CA3CD,CA6CA,cAAepB,CAAAA,OAAf","sourcesContent":["import React, { useRef, useCallback, useEffect, useState } from \"react\";\n\nconst ChatLog = ({ socket }: any) => {\n  const [msgList, setMsgList] = useState<any[]>([]);\n  let editDone = false;\n  const scrollRef:any = useRef();\n\n  const scrollToBottom = useCallback(() => {\n    if (editDone) {\n      scrollRef.current.scrollIntoView({ behavior: 'smooth', block: 'end', inline: 'nearest' });\n\t  editDone = false;\n    }\n  }, [editDone]);\n\n  useEffect(() => {\n\t// messsgeItem : {msg: String, name: String, timeStamp: String}\n    socket.on(\"onReceive\", (messageItem: never) => {\n      setMsgList((msgList) => [...msgList, messageItem]);\n\t  editDone = true;\n      console.log(messageItem);\n    });\n    socket.on(\"onConnect\", (systemMessage: string) => {\n      setMsgList((msgList) => [...msgList, { msg: systemMessage } as never]);\n    });\n    socket.on(\"onDisconnect\", (systemMessage: any) => {\n      setMsgList((msgList) => [...msgList, { msg: systemMessage } as never]);\n    });\n    return () => {\n      socket.disconnect();\n    };\n  }, [socket]);\n\n  scrollToBottom()\n\n  return (\n    <div>\n      {msgList.map((msg, idx) => (\n        <div key={idx}>\n          <div>{msg.userName}</div>\n          <div>{msg.timeStamp}</div>\n          <div>{msg.msg}</div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ChatLog;"]},"metadata":{},"sourceType":"module"}