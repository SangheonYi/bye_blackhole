{"ast":null,"code":"import _slicedToArray from\"/Users/jinkim/ts_5/app/react_p/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _toConsumableArray from\"/Users/jinkim/ts_5/app/react_p/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/jinkim/ts_5/app/react_p/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React,{createContext,useReducer,useContext,useEffect}from\"react\";import PubNub from\"pubnub\";import keyConfiguration from\"./config/pubnub-keys.json\";//import Blank from './';\nimport DOMPurify from'dompurify';import{jsx as _jsx}from\"react/jsx-runtime\";var generatedName=generateName();// This is the UUID that we use for identification.\n//This is where you define the chat app properties.\nexport var appData={presence:true,// Enable or disable presence.\npresenceLastUpdated:0,// Last time that a presence event was used to update the activeUsers list. Used to prevent duplicate events from triggering multiple calls to hereNow.\n//presenceOccupancy: 0, // How many active users there are.\nhistory:true,// Enable or disable history.\nhistoryMax:10,// How many messages to load from history (max 100).\nmaxMessagesInList:200,// Max number of messages at most in the message list.\nselfAvatar:\"https://ui-avatars.com/api/?name=\"+generatedName+\"?size=100&rounded=true&uppercase=true&bold=true&background=edab63&color=FFF\",//The URL for the avatar graphic file\nselfName:generatedName,// Set the display name to be the same as the UUID. You can make this whatever you want.\nmessages:[],// Array of UserMessages.\nactiveUsers:[],// Array of active users.\nchannel:\"global\",// The chat channel\npubnub:new PubNub({publishKey:keyConfiguration.publishKey,// See config/pubnub-keys.json.\nsubscribeKey:keyConfiguration.subscribeKey,// See config/pubnub-keys.json.\nuuid:generatedName// Use the UUID for identification on PubNub.\n}),message:\"\"};function capFirst(string){return string.charAt(0).toUpperCase()+string.slice(1);}function getRandomInt(min,max){return Math.floor(Math.random()*(max-min))+min;}function generateName(){var name1=[\"Darwin\",\"Natalee\",\"Ryann\",\"Maggie\",\"Scarlet\",\"Kassidy\",\"Matteo\",\"Ethen\",\"Zain\",\"Vivian\",\"Tess\",\"Krystal\",\"Liberty\",\"Brielle\",\"Jaycee\",\"Sylvia\",\"Eden\",\"Arianna\",\"Martha\",\"Jayson\",\"Lainey\",\"Jorden\",\"Daniela\",\"Mohammad\",\"Kathleen\",\"Reuben\",\"Shane\",\"Annie\",\"Logan\",\"Bo\",\"Darius\",\"Nadia\",\"Cristal\",\"Reid\",\"Thomas\",\"Anna\",\"Javion\",\"Gabriel\",\"Bennett\",\"Jerimiah\",\"Connor\",\"Bryant\",\"Parker\",\"Livia\",\"Ellie\",\"Esteban\",\"Morgan\",\"Toby\",\"Saige\",\"Imani\",\"Semaj\",\"Manuel\",\"Ansley\",\"Miah\",\"Ezequiel\",\"Makenzie\",\"Vincent\",\"Jacquelyn\",\"Rowan\",\"Leyla\",\"Evangeline\",\"Ella\",\"Briana\",\"Aaron\",\"Ciara\",\"Karla\",\"Jeffrey\",\"Damarion\",\"Raul\",\"Derick\",\"Jarrett\",\"Frances\",\"Xiomara\",\"Monica\",\"Deon\",\"Abigail\",\"Beau\",\"Angel\",\"Reese\",\"Kylee\",\"Ana\",\"Laci\",\"Madden\",\"Kaleigh\",\"Eduardo\",\"Leilani\",\"Aron\",\"Samson\",\"Trevon\",\"Cloe\",\"Jillian\",\"Avery\",\"Skylar\",\"Autumn\",\"Lesly\",\"Gael\",\"Emilio\",\"Mylee\",\"Courtney\",\"Francesca\",\"Jaydan\",\"Josie\",\"Victoria\",\"Jan\",\"Iliana\",\"Alannah\",\"Veronica\",\"Izaiah\",\"Stacy\",\"Callie\",\"Cynthia\",\"Gilberto\",\"Katelynn\",\"Jaylen\",\"Anahi\",\"Olivia\",\"Lincoln\",\"Niko\",\"Kiana\",\"Harold\",\"Lauren\",\"Adyson\",\"Jewel\",\"Adriana\",\"Mike\",\"Eve\",\"Johanna\",\"Maximillian\",\"Jakayla\",\"Tatiana\",\"Jake\",\"Tony\",\"Marlene\",\"Sara\",\"Jaylynn\",\"Jeffery\",\"Bryson\",\"Jesus\",\"Odin\",\"Anderson\",\"Chris\",\"Cadence\",\"Alfredo\",\"Janiah\",\"Matias\",\"Camren\",\"Nehemiah\",\"Cannon\",\"Dillon\",\"Kierra\",\"Lila\",\"Janet\",\"Jaelyn\",\"Roland\",\"Deacon\",\"Lilly\",\"Mallory\",\"Ryan\",\"Leo\",\"Carleigh\",\"Emma\",\"Evelyn\",\"Jordin\",\"Blaine\",\"Maleah\",\"Clayton\",\"Ryker\",\"Gerald\",\"Zack\",\"Alfred\",\"Julianna\",\"Finn\",\"Yadira\",\"Bailey\",\"Jaylan\",\"Cesar\",\"Arielle\",\"Michaela\",\"Tyson\",\"Lindsey\",\"Elias\",\"Carla\",\"Aedan\",\"Ashley\",\"Charles\",\"Enzo\",\"Luis\",\"Killian\",\"Samir\",\"Reece\",\"Yandel\",\"Teresa\",\"Mckinley\",\"Kendra\",\"Camryn\",\"Zavier\",\"Cody\",\"Ralph\",\"Brooklynn\",\"Casey\",\"Maeve\",\"Jayvon\",\"Davion\",\"Giada\",\"Cierra\",\"Marshall\",\"Alyvia\",\"Rodolfo\",\"Demarion\",\"Hana\",\"Esther\",\"Jose\",\"Alena\",\"Kamren\",\"Deven\",\"Tianna\",\"Beckett\",\"Phoenix\",\"Cayden\",\"Hazel\",\"Denise\",\"Kingston\",\"Charlie\",\"Miguel\",\"Carissa\",\"Jairo\",\"Adolfo\",\"Kaley\",\"Jaron\",\"Miracle\",\"Micaela\",\"Ally\",\"Louis\",\"Kyan\",\"Nicolas\",\"Steve\",\"Jackson\",\"Mckenzie\",\"Drake\",\"Willie\",\"Cali\",\"Joanna\",\"Kareem\",\"Halle\",\"Amina\",\"Chandler\",\"Melanie\",\"Darian\",\"Hassan\",\"Keyla\"];var name2=[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"];var first=capFirst(name1[getRandomInt(1,name1.length)]);var last=capFirst(name2[getRandomInt(1,name2.length)]);return first+last;}//This is the default settings for your chat app.\nexport var AppStateContext=/*#__PURE__*/createContext({});//The functions below are accessible through passing parameters to a dispatch function always accessible in our components.\nexport var appStateReducer=function appStateReducer(state,action){switch(action.type){//ADD_MESSAGE adds an incoming message to our internal MessageList buffer.\ncase\"ADD_MESSAGE\":{//If the messagelist is over our cap we discard the oldest message in the list.\nif(state.messages.length>state.maxMessagesInList){state.messages.shift();}var addMessage=_objectSpread(_objectSpread({},state),{},{messages:[].concat(_toConsumableArray(state.messages),[action.payload])});return addMessage;}//ADD_HISTORY prepends array of messages to our internal MessageList buffer.\ncase\"ADD_HISTORY\":{var historyMerged=_objectSpread(_objectSpread({},state),{},{messages:[].concat(_toConsumableArray(action.payload),_toConsumableArray(state.messages))});//If the messagelist is over our cap we discard the oldest messages in the list.\nif(state.messages.length>state.maxMessagesInList){state.messages.slice(state.messages.length-state.maxMessagesInList,state.messages.length);}return historyMerged;}//REFRESH_ACTIVEUSERS replaces array of users in our internal activeUsers buffer.\ncase\"REFRESH_ACTIVEUSERS\":{var activeUsersList=_objectSpread(_objectSpread({},state),{},{activeUsers:_toConsumableArray(action.payload)});return activeUsersList;}//UPDATE_OCCUPANCY updates the current count of users\ncase\"UPDATE_OCCUPANCY\":{var occupantsUpdate=_objectSpread({},state);return occupantsUpdate;}// Publishes a message to chat channel.\ncase\"SEND_MESSAGE\":{state.pubnub.publish({channel:state.channel,message:{\"message\":DOMPurify.sanitize(action.payload),\"senderName\":state.selfName}});return _objectSpread({},state);}default:{return state;}}};export var AppStateProvider=function AppStateProvider(_ref){var children=_ref.children;var _useReducer=useReducer(appStateReducer,appData),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];useEffect(function(){var newActiveUsers=state.activeUsers;try{//This where PubNub receives messages subscribed by the channel.\nstate.pubnub.addListener({message:function message(messageEvent){//console.log(`RECEIVING MESSAGE ${messageEvent.message.key}`);\nmessageEvent.message.message=DOMPurify.sanitize(messageEvent.message.message);dispatch({type:\"ADD_MESSAGE\",payload:messageEvent.message});},presence:function presence(p){if(p.action==\"join\"){if(!state.activeUsers.includes(p.uuid)){// Only add user if they are missing from the list.\nnewActiveUsers.push(p.uuid);newActiveUsers.sort();dispatch({type:\"REFRESH_ACTIVEUSERS\",payload:newActiveUsers});dispatch({type:\"UPDATE_OCCUPANCY\",payload:String(newActiveUsers.length)});// Add to current count\n}}if(p.action==\"timeout\"||p.action==\"leave\"){var index=newActiveUsers.indexOf(p.uuid);if(index!==-1){newActiveUsers.splice(index,1);dispatch({type:\"REFRESH_ACTIVEUSERS\",payload:newActiveUsers});dispatch({type:\"UPDATE_OCCUPANCY\",payload:String(newActiveUsers.length)});}}}});if(state.history){//Get the history on the default channel.\nstate.pubnub.history({channel:state.channel,count:state.historyMax// Limit of 100 messages.\n},function(status,response){if(response.messages.length>0){var historyMessages=[];for(var i=0;i<=response.messages.length;i++){if(typeof response.messages[i]!==\"undefined\"){response.messages[i].entry.message=DOMPurify.sanitize(response.messages[i].entry.message);historyMessages.push(response.messages[i].entry);}}dispatch({type:\"ADD_HISTORY\",payload:historyMessages});}});}if(state.presence){state.pubnub.hereNow({channels:[state.channel],includeUUIDs:true// In this demo we're using the uuid as the user's name. You could also use presence state to provide a username and more. In this app all we need is the UUID of online users.\n},function(status,response){if(response.channels[state.channel].occupancy>0){var newActiveUsers=state.activeUsers;for(var i=0;i<response.channels[state.channel].occupancy;i++){if(!state.activeUsers.includes(response.channels[state.channel].occupants[i].uuid)){newActiveUsers.push(response.channels[state.channel].occupants[i].uuid);}}newActiveUsers.push(state.selfName);newActiveUsers.sort();// This prevents a users name from moving in the list.\ndispatch({type:\"REFRESH_ACTIVEUSERS\",payload:newActiveUsers});dispatch({type:\"UPDATE_OCCUPANCY\",payload:String(newActiveUsers.length)});}});}// Subscribe on the default channel.\nstate.pubnub.subscribe({channels:[state.channel],//Only one channel, split in different rows if required and load in props, can be set by load balancer.\nwithPresence:state.presence});}catch(e){console.log(\"Subscribe error \".concat(e.message));}},[appData]);return/*#__PURE__*/_jsx(AppStateContext.Provider,{value:{state:state,dispatch:dispatch},children:children});};export var useAppState=function useAppState(){return useContext(AppStateContext);};","map":{"version":3,"sources":["/Users/jinkim/ts_5/app/react_p/src/codes/AppStateContext.tsx"],"names":["React","createContext","useReducer","useContext","useEffect","PubNub","keyConfiguration","DOMPurify","generatedName","generateName","appData","presence","presenceLastUpdated","history","historyMax","maxMessagesInList","selfAvatar","selfName","messages","activeUsers","channel","pubnub","publishKey","subscribeKey","uuid","message","capFirst","string","charAt","toUpperCase","slice","getRandomInt","min","max","Math","floor","random","name1","name2","first","length","last","AppStateContext","appStateReducer","state","action","type","shift","addMessage","payload","historyMerged","activeUsersList","occupantsUpdate","publish","sanitize","AppStateProvider","children","dispatch","newActiveUsers","addListener","messageEvent","p","includes","push","sort","String","index","indexOf","splice","count","status","response","historyMessages","i","entry","hereNow","channels","includeUUIDs","occupancy","occupants","subscribe","withPresence","e","console","log","useAppState"],"mappings":"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","sourcesContent":["import React, { useCallback, createContext, useReducer, useContext, useState, useEffect } from \"react\"\nimport { generateUUID } from 'pubnub';\nimport PubNub, { SubscribeParameters } from \"pubnub\";\nimport keyConfiguration from \"./config/pubnub-keys.json\";\nimport { debug } from \"console\";\n//import Blank from './';\nimport DOMPurify from 'dompurify';\n\nconst generatedName: string = generateName(); // This is the UUID that we use for identification.\n\n//This is where you define the chat app properties.\nexport const appData: AppState = {\n  presence: true, // Enable or disable presence.\n  presenceLastUpdated: 0, // Last time that a presence event was used to update the activeUsers list. Used to prevent duplicate events from triggering multiple calls to hereNow.\n  //presenceOccupancy: 0, // How many active users there are.\n  history: true, // Enable or disable history.\n  historyMax: 10, // How many messages to load from history (max 100).\n  maxMessagesInList: 200, // Max number of messages at most in the message list.\n  selfAvatar: \"https://ui-avatars.com/api/?name=\"+generatedName+\"?size=100&rounded=true&uppercase=true&bold=true&background=edab63&color=FFF\", //The URL for the avatar graphic file\n  selfName: generatedName, // Set the display name to be the same as the UUID. You can make this whatever you want.\n  messages: [], // Array of UserMessages.\n  activeUsers: [], // Array of active users.\n  channel: \"global\", // The chat channel\n  pubnub: new PubNub({\n    publishKey: keyConfiguration.publishKey, // See config/pubnub-keys.json.\n    subscribeKey: keyConfiguration.subscribeKey, // See config/pubnub-keys.json.\n    uuid: generatedName // Use the UUID for identification on PubNub.\n  }),\n  message: \"\",\n}\n\nfunction capFirst(string: string): string {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction getRandomInt(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\n\nfunction generateName(): string{\n  var name1 = [\"Darwin\",\"Natalee\",\"Ryann\",\"Maggie\",\"Scarlet\",\"Kassidy\",\"Matteo\",\"Ethen\",\"Zain\",\"Vivian\",\"Tess\",\"Krystal\",\"Liberty\",\"Brielle\",\"Jaycee\",\"Sylvia\",\"Eden\",\"Arianna\",\"Martha\",\"Jayson\",\"Lainey\",\"Jorden\",\"Daniela\",\"Mohammad\",\"Kathleen\",\"Reuben\",\"Shane\",\"Annie\",\"Logan\",\"Bo\",\"Darius\",\"Nadia\",\"Cristal\",\"Reid\",\"Thomas\",\"Anna\",\"Javion\",\"Gabriel\",\"Bennett\",\"Jerimiah\",\"Connor\",\"Bryant\",\"Parker\",\"Livia\",\"Ellie\",\"Esteban\",\"Morgan\",\"Toby\",\"Saige\",\"Imani\",\"Semaj\",\"Manuel\",\"Ansley\",\"Miah\",\"Ezequiel\",\"Makenzie\",\"Vincent\",\"Jacquelyn\",\"Rowan\",\"Leyla\",\"Evangeline\",\"Ella\",\"Briana\",\"Aaron\",\"Ciara\",\"Karla\",\"Jeffrey\",\"Damarion\",\"Raul\",\"Derick\",\"Jarrett\",\"Frances\",\"Xiomara\",\"Monica\",\"Deon\",\"Abigail\",\"Beau\",\"Angel\",\"Reese\",\"Kylee\",\"Ana\",\"Laci\",\"Madden\",\"Kaleigh\",\"Eduardo\",\"Leilani\",\"Aron\",\"Samson\",\"Trevon\",\"Cloe\",\"Jillian\",\"Avery\",\"Skylar\",\"Autumn\",\"Lesly\",\"Gael\",\"Emilio\",\"Mylee\",\"Courtney\",\"Francesca\",\"Jaydan\",\"Josie\",\"Victoria\",\"Jan\",\"Iliana\",\"Alannah\",\"Veronica\",\"Izaiah\",\"Stacy\",\"Callie\",\"Cynthia\",\"Gilberto\",\"Katelynn\",\"Jaylen\",\"Anahi\",\"Olivia\",\"Lincoln\",\"Niko\",\"Kiana\",\"Harold\",\"Lauren\",\"Adyson\",\"Jewel\",\"Adriana\",\"Mike\",\"Eve\",\"Johanna\",\"Maximillian\",\"Jakayla\",\"Tatiana\",\"Jake\",\"Tony\",\"Marlene\",\"Sara\",\"Jaylynn\",\"Jeffery\",\"Bryson\",\"Jesus\",\"Odin\",\"Anderson\",\"Chris\",\"Cadence\",\"Alfredo\",\"Janiah\",\"Matias\",\"Camren\",\"Nehemiah\",\"Cannon\",\"Dillon\",\"Kierra\",\"Lila\",\"Janet\",\"Jaelyn\",\"Roland\",\"Deacon\",\"Lilly\",\"Mallory\",\"Ryan\",\"Leo\",\"Carleigh\",\"Emma\",\"Evelyn\",\"Jordin\",\"Blaine\",\"Maleah\",\"Clayton\",\"Ryker\",\"Gerald\",\"Zack\",\"Alfred\",\"Julianna\",\"Finn\",\"Yadira\",\"Bailey\",\"Jaylan\",\"Cesar\",\"Arielle\",\"Michaela\",\"Tyson\",\"Lindsey\",\"Elias\",\"Carla\",\"Aedan\",\"Ashley\",\"Charles\",\"Enzo\",\"Luis\",\"Killian\",\"Samir\",\"Reece\",\"Yandel\",\"Teresa\",\"Mckinley\",\"Kendra\",\"Camryn\",\"Zavier\",\"Cody\",\"Ralph\",\"Brooklynn\",\"Casey\",\"Maeve\",\"Jayvon\",\"Davion\",\"Giada\",\"Cierra\",\"Marshall\",\"Alyvia\",\"Rodolfo\",\"Demarion\",\"Hana\",\"Esther\",\"Jose\",\"Alena\",\"Kamren\",\"Deven\",\"Tianna\",\"Beckett\",\"Phoenix\",\"Cayden\",\"Hazel\",\"Denise\",\"Kingston\",\"Charlie\",\"Miguel\",\"Carissa\",\"Jairo\",\"Adolfo\",\"Kaley\",\"Jaron\",\"Miracle\",\"Micaela\",\"Ally\",\"Louis\",\"Kyan\",\"Nicolas\",\"Steve\",\"Jackson\",\"Mckenzie\",\"Drake\",\"Willie\",\"Cali\",\"Joanna\",\"Kareem\",\"Halle\",\"Amina\",\"Chandler\",\"Melanie\",\"Darian\",\"Hassan\",\"Keyla\"];\n  var name2 = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"];\n  var first = capFirst(name1[getRandomInt(1, name1.length)]);\n  var last = capFirst(name2[getRandomInt(1, name2.length)]);\n  return (first + last);\n}\n\n//This is the default settings for your chat app.\nexport interface AppState {\n  presence: boolean,\n  presenceLastUpdated: number,\n  history: boolean,\n  historyMax: number,\n  maxMessagesInList: number,\n  message: string;\n  selfAvatar: string,\n  selfName: string,\n  messages: Array<string>,\n  activeUsers: Array<string>,\n  pubnub: PubNub,\n  channel: string\n}\n\ntype Action =\n  {\n    type: \"ADD_MESSAGE\",\n    payload: string\n  }\n  | {\n    type: \"ADD_HISTORY\",\n    payload: Array<string>\n  }\n  | {\n    type: \"REFRESH_ACTIVEUSERS\",\n    payload: Array<string>\n  }\n  | {\n    type: \"UPDATE_OCCUPANCY\",\n    payload: string\n  }\n  | {\n    type: \"SEND_MESSAGE\",\n    payload: {\n      messageContent: string\n    }\n  }\n\ninterface AppStateContextProps {\n  state: AppState,\n  dispatch: any\n}\n\nexport const AppStateContext = createContext<AppStateContextProps>(\n  {} as AppStateContextProps\n)\n\n//The functions below are accessible through passing parameters to a dispatch function always accessible in our components.\nexport const appStateReducer = (state: AppState, action: Action): AppState => {\n  switch (action.type) {\n\n    //ADD_MESSAGE adds an incoming message to our internal MessageList buffer.\n    case \"ADD_MESSAGE\": {\n      //If the messagelist is over our cap we discard the oldest message in the list.\n      if (state.messages.length > state.maxMessagesInList ){\n        state.messages.shift();\n      }\n\n      const addMessage: AppState = {\n        ...state,\n        messages: [\n          ...state.messages as Array<string>,\n          action.payload as string\n        ]\n      };\n\n      return addMessage;\n    }\n     //ADD_HISTORY prepends array of messages to our internal MessageList buffer.\n    case \"ADD_HISTORY\": {\n\n       const historyMerged: AppState = {\n        ...state,\n        messages: [\n          ...action.payload as Array<string>,\n          ...state.messages as Array<string>\n        ]\n      };\n\n      //If the messagelist is over our cap we discard the oldest messages in the list.\n      if (state.messages.length > state.maxMessagesInList) {\n        state.messages.slice(state.messages.length-state.maxMessagesInList, state.messages.length);\n      }\n\n      return historyMerged;\n    }\n    //REFRESH_ACTIVEUSERS replaces array of users in our internal activeUsers buffer.\n    case \"REFRESH_ACTIVEUSERS\": {\n       const activeUsersList: AppState = {\n        ...state,\n        activeUsers: [\n          ...action.payload as Array<string>\n        ]\n      };\n      return activeUsersList;\n    }\n    //UPDATE_OCCUPANCY updates the current count of users\n    case \"UPDATE_OCCUPANCY\": {\n\n      const occupantsUpdate: AppState = {\n        ...state,\n        //presenceOccupancy: action.payload as string\n      };\n\n      return occupantsUpdate;\n    }\n    // Publishes a message to chat channel.\n    case \"SEND_MESSAGE\": {\n\n      state.pubnub.publish({\n        channel: state.channel,\n        message: {\n          \"message\": DOMPurify.sanitize(action.payload as any) as string,\n          \"senderName\": state.selfName as string,\n        },\n      });\n\n      return { ...state }\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\nexport const AppStateProvider = ({ children }: React.PropsWithChildren<{}>) => {\n  const [state, dispatch] = useReducer(appStateReducer, appData)\n  useEffect(() => {\n    var newActiveUsers = state.activeUsers;\n    try {\n      //This where PubNub receives messages subscribed by the channel.\n      state.pubnub.addListener({\n        message: (messageEvent) => {\n          //console.log(`RECEIVING MESSAGE ${messageEvent.message.key}`);\n          messageEvent.message.message = DOMPurify.sanitize(messageEvent.message.message as string) as string;\n          dispatch({\n            type: \"ADD_MESSAGE\",\n            payload: messageEvent.message\n          });\n        },\n        presence: function(p) {\n          if (p.action == \"join\") {\n            if ((!state.activeUsers.includes(p.uuid)) ) { // Only add user if they are missing from the list.\n              newActiveUsers.push(p.uuid);\n              newActiveUsers.sort();\n              dispatch({\n                type: \"REFRESH_ACTIVEUSERS\",\n                payload: newActiveUsers\n              });\n              dispatch({\n                type: \"UPDATE_OCCUPANCY\",\n                payload: String(newActiveUsers.length)\n              });\n              // Add to current count\n            }\n          }\n          if ((p.action == \"timeout\") || (p.action == \"leave\")) {\n            var index = newActiveUsers.indexOf(p.uuid)\n            if (index !== -1) {\n              newActiveUsers.splice(index, 1);\n              dispatch({\n                type: \"REFRESH_ACTIVEUSERS\",\n                payload: newActiveUsers\n              });\n              dispatch({\n                type: \"UPDATE_OCCUPANCY\",\n                payload: String(newActiveUsers.length)\n              });\n            }\n          }\n        }\n      });\n\n      if (state.history) {\n        //Get the history on the default channel.\n        state.pubnub.history(\n            {\n                channel: state.channel,\n                count: state.historyMax // Limit of 100 messages.\n            },\n            (status, response) => {\n              if (response.messages.length > 0) {\n                var historyMessages: Array<string> = [];\n                for (var i = 0; i <= response.messages.length; i++) {\n                  if (typeof response.messages[i] !== \"undefined\") {\n                    response.messages[i].entry.message = DOMPurify.sanitize(response.messages[i].entry.message as string) as string;\n                    historyMessages.push(response.messages[i].entry as string);\n                  }\n                }\n                dispatch({\n                  type: \"ADD_HISTORY\",\n                  payload: historyMessages\n                });\n              }\n            }\n        );\n      }\n\n      if (state.presence) {\n        state.pubnub.hereNow(\n          {\n              channels: [state.channel],\n              includeUUIDs: true // In this demo we're using the uuid as the user's name. You could also use presence state to provide a username and more. In this app all we need is the UUID of online users.\n          },\n          (status, response) => {\n            if (response.channels[state.channel].occupancy > 0) {\n              var newActiveUsers = state.activeUsers;\n              for (var i = 0; i < response.channels[state.channel].occupancy; i++) {\n                if (!state.activeUsers.includes(response.channels[state.channel].occupants[i].uuid)) {\n                  newActiveUsers.push(response.channels[state.channel].occupants[i].uuid);\n                }\n              }\n              newActiveUsers.push(state.selfName);\n              newActiveUsers.sort(); // This prevents a users name from moving in the list.\n              dispatch({\n                type: \"REFRESH_ACTIVEUSERS\",\n                payload: newActiveUsers\n              });\n              dispatch({\n                type: \"UPDATE_OCCUPANCY\",\n                payload: String(newActiveUsers.length)\n              });\n            }\n          }\n        );\n\n      }\n\n      // Subscribe on the default channel.\n      state.pubnub.subscribe(\n        {\n          channels: [state.channel], //Only one channel, split in different rows if required and load in props, can be set by load balancer.\n          withPresence: state.presence,\n        }\n      );\n\n    } catch (e) {\n      console.log(`Subscribe error ${e.message}`);\n    }\n\n  }, [appData]);\n\n  return (\n    <AppStateContext.Provider value={{ state, dispatch }}>\n      {children}\n    </AppStateContext.Provider>\n  );\n}\n\nexport const useAppState = () => {\n  return useContext(AppStateContext)\n}"]},"metadata":{},"sourceType":"module"}